import streamlit as st
import pandas as pd
import numpy as np
from scipy import stats
import plotly.express as px
import io

# ==========================
# C·∫•u h√¨nh trang
# ==========================
st.set_page_config(page_title="Ph√¢n T√≠ch ƒêi·ªÉm B·∫•t Th∆∞·ªùng", layout="wide", page_icon="üìä")

# Hotlink Imgur cho h√¨nh ·∫£nh (v√≠ d·ª•, b·∫°n c·∫ßn thay th·∫ø b·∫±ng URL th·ª±c t·∫ø c·ªßa m√¨nh)
# R·∫§T QUAN TR·ªåNG: THAY TH·∫æ URL N√ÄY B·∫∞NG H√åNH ·∫¢NH TH·ª∞C T·∫æ C·ª¶A B·∫†N
IMGUR_IMAGE_URL = "https://i.imgur.com/your_image_link.png"

# CSS t√πy ch·ªânh
st.markdown(f"""
<style>
    .main {{ background-color: #f0f2f6; }}
    .stButton>button {{ background-color: #4CAF50; color: white; border-radius: 5px; }}
    .stFileUploader>label {{ font-weight: bold; }}
    .css-1d391kg {{ background-color: #ffffff; border-radius: 10px; padding: 20px; }}
    h1 {{ color: #2c3e50; }}
    h2 {{ color: #34495e; }}
    .stAlert {{ border-radius: 5px; }}
    footer {{ visibility: hidden; }}
    .footer {{
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        background-color: #2c3e50;
        color: white;
        text-align: center;
        padding: 10px;
    }}

    /* === T√ôY CH·ªàNH SLIDER Z-SCORE === */
    /* Nh·∫Øm m·ª•c ti√™u c·ª• th·ªÉ v√†o slider trong sidebar (Ng∆∞·ª°ng Z-Score) */
    
    /* 1. Thanh tr∆∞·ª£t chung (Track) */
    [data-testid="stSidebarContent"] .stSlider > div > div:nth-child(2) > div {{
        background: #ccc; /* M√†u n·ªÅn thanh tr∆∞·ª£t */
        box-shadow: inset 0 1px 3px rgba(0,0,0,0.5); /* Hi·ªáu ·ª©ng l√µm (3D-like) */
        border-radius: 5px;
    }}
    
    /* 2. Ph·∫ßn ƒë√£ ch·ªçn (Fill) */
    [data-testid="stSidebarContent"] .stSlider > div > div:nth-child(2) > div > div[data-testid="stTrackFill"] {{
        background: #4CAF50; /* M√†u fill */
        box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.3); /* Hi·ªáu ·ª©ng n·ªïi (3D-like) */
        border-radius: 5px;
    }}

    /* 3. N√∫m k√©o (Thumb) v√† Cursor */
    [data-testid="stSidebarContent"] [data-testid="stThumbValue"] {{
        background: #FF5722; /* M√†u n√∫m */
        border: 3px solid #E64A19; /* Vi·ªÅn */
        width: 25px !important; /* TƒÉng k√≠ch th∆∞·ªõc n√∫m */
        height: 25px !important; 
        border-radius: 50%; /* H√¨nh tr√≤n */
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.4), 0 6px 20px 0 rgba(0,0,0,0.3); /* Hi·ªáu ·ª©ng n·ªïi 3D */
        cursor: grab !important; /* THAY ƒê·ªîI CURSOR */
        transform: scale(1.1); /* H∆°i to h∆°n */
    }}
    
    /* 4. Hi·ªáu ·ª©ng khi k√©o (Active state) */
    [data-testid="stSidebarContent"] [data-testid="stThumbValue"]:active {{
        cursor: grabbing !important;
        transform: scale(1.3); /* To h∆°n khi k√©o */
        box-shadow: 0 5px 15px rgba(0,0,0,0.5);
    }}

    /* T√πy ch·ªânh ti√™u ƒë·ªÅ v√† upload file ƒë·ªÉ d√πng c·ªôt */
    .file-uploader-container {{
        display: flex;
        flex-direction: row;
        gap: 20px; /* Kho·∫£ng c√°ch gi·ªØa c√°c c·ªôt */
    }}
</style>
""", unsafe_allow_html=True)

# ==========================
# Header logo
# ==========================
col_logo, col_title = st.columns([1,6])
with col_logo:
    try:
        st.image("Logo_Marie_Curie.png", width=100)
    except:
        st.write("üè´ THPT Marie Curie")
with col_title:
    st.title("üìä Ph√¢n T√≠ch ƒêi·ªÉm S·ªë B·∫•t Th∆∞·ªùng S·ª≠ D·ª•ng Z-Score")

st.markdown("""
·ª®ng d·ª•ng ph√¢n t√≠ch ƒëi·ªÉm s·ªë b·∫•t th∆∞·ªùng d·ª±a tr√™n Z-score. 
- File CSV c·∫ßn c√≥ header: "MaHS", "Lop", c√°c c·ªôt m√¥n h·ªçc. 
- Z-score: ƒêi·ªÉm b·∫•t th∆∞·ªùng n·∫øu |z-score| > ng∆∞·ª°ng (m·∫∑c ƒë·ªãnh 2). 
- H·ªó tr·ª£ UTF-8.
""")

# ==========================
# Sidebar
# ==========================
with st.sidebar:
    st.header("üõ† C√†i ƒë·∫∑t")
    z_threshold = st.slider("Ng∆∞·ª°ng Z-Score", 1.0, 5.0, 2.0, 0.1)
    st.markdown("---")
    st.info("CSV ph·∫£i c√≥ c·ªôt s·ªë cho ƒëi·ªÉm v√† m√£ h√≥a UTF-8.")

# ==========================
# Upload file v√† Hi·ªÉn th·ªã h√¨nh ·∫£nh
# ==========================

# Chia c·ªôt cho khu v·ª±c Upload v√† H√¨nh ·∫£nh
col_upload, col_image = st.columns([1, 1])

with col_upload:
    uploaded_file = st.file_uploader("üìÇ Upload b·∫£ng ƒëi·ªÉm (CSV)", type="csv")

with col_image:
    # Hi·ªÉn th·ªã h√¨nh ·∫£nh t·ª´ hotlink Imgur
    st.image(IMGUR_IMAGE_URL, width=540, caption="H√¨nh ·∫£nh minh h·ªça d·ªØ li·ªáu (1080x560)")

if uploaded_file is not None:
    # ƒê·ªçc file CSV
    try:
        df = pd.read_csv(uploaded_file, encoding='utf-8')
    except:
        uploaded_file.seek(0)
        df = pd.read_csv(uploaded_file, encoding='latin1')
        st.warning("File kh√¥ng ph·∫£i UTF-8, ƒë√£ d√πng latin1.")

    # Chu·∫©n h√≥a t√™n c·ªôt
    df.columns = df.columns.str.strip().str.replace(' ','').str.capitalize()

    # Ki·ªÉm tra c·ªôt l·ªõp
    class_col = [c for c in df.columns if c.lower()=='lop']
    if not class_col:
        st.error("Kh√¥ng t√¨m th·∫•y c·ªôt 'Lop'.")
        st.stop()
    df['Lop'] = df[class_col[0]]

    # Ki·ªÉm tra c·ªôt h·ªçc sinh
    student_col = [c for c in df.columns if c.lower() in ['mahs','id','studentid']]
    if not student_col:
        st.error("Kh√¥ng t√¨m th·∫•y c·ªôt 'MaHS'.")
        st.stop()
    df['MaHS'] = df[student_col[0]]

    # Ch·ªçn c√°c c·ªôt m√¥n h·ªçc
    subject_cols = [c for c in df.columns if c not in ['MaHS','Lop']]
    if len(subject_cols)==0:
        st.error("Kh√¥ng t√¨m th·∫•y c·ªôt ƒëi·ªÉm m√¥n h·ªçc.")
        st.stop()

    # Multi ch·ªçn l·ªõp + m√¥n
    classes = st.multiselect("Ch·ªçn l·ªõp ƒë·ªÉ l·ªçc", sorted(df['Lop'].unique()), default=sorted(df['Lop'].unique()))
    subjects = st.multiselect("Ch·ªçn m√¥n ƒë·ªÉ ph√¢n t√≠ch", subject_cols, default=subject_cols)

    df_filtered = df[df['Lop'].isin(classes)].copy()
    if df_filtered.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu cho l·ªõp ƒë∆∞·ª£c ch·ªçn.")
        st.stop()

    # T√≠nh Z-score ri√™ng t·ª´ng m√¥n
    for subj in subjects:
        df_filtered[f'Z_{subj}'] = stats.zscore(df_filtered[subj].fillna(0))
        df_filtered[f'Highlight_{subj}'] = df_filtered[f'Z_{subj}'].abs() > z_threshold

    # ==========================
    # B·∫£ng d·ªØ li·ªáu
    # ==========================
    st.subheader("üìã B·∫£ng ƒëi·ªÉm g·ªëc v√† b·∫•t th∆∞·ªùng")
    col1, col2 = st.columns([3,1])

    with col1:
        st.write("**B·∫£ng g·ªëc h·ªçc sinh**")
        st.dataframe(df_filtered[['MaHS','Lop']+subjects], use_container_width=True)

        # T·∫°o b·∫£ng b·∫•t th∆∞·ªùng
        anomaly_cols = ['MaHS','Lop'] + [subj for subj in subjects]
        anomalies = df_filtered.copy()
        # gi·ªØ l·∫°i h·ªçc sinh b·∫•t th∆∞·ªùng b·∫•t k·ª≥ m√¥n
        anomalies = anomalies[anomalies[[f'Highlight_{subj}' for subj in subjects]].any(axis=1)]
        st.write("**H·ªçc sinh b·∫•t th∆∞·ªùng**")
        st.dataframe(anomalies[anomaly_cols], use_container_width=True)

        # Download CSV
        csv_buffer = io.StringIO()
        anomalies.to_csv(csv_buffer, index=False, encoding='utf-8')
        st.download_button("üì• Xu·∫•t CSV h·ªçc sinh b·∫•t th∆∞·ªùng", csv_buffer.getvalue(), file_name="Students_Anomalies.csv")

    # ==========================
    # Bi·ªÉu ƒë·ªì c·ªôt t·ªïng h·ªçc sinh vs h·ªçc sinh b·∫•t th∆∞·ªùng theo l·ªõp
    # ==========================
    st.subheader("üìä Bi·ªÉu ƒë·ªì c·ªôt theo l·ªõp")
    class_summary = df_filtered.groupby('Lop').size().reset_index(name='T·ªïng h·ªçc sinh')
    anomaly_count = anomalies.groupby('Lop').size().reset_index(name='H·ªçc sinh b·∫•t th∆∞·ªùng')
    summary = pd.merge(class_summary, anomaly_count, on='Lop', how='left').fillna(0)

    fig_col = px.bar(summary, x='Lop', y=['T·ªïng h·ªçc sinh','H·ªçc sinh b·∫•t th∆∞·ªùng'],
                      barmode='group', color_discrete_map={'T·ªïng h·ªçc sinh':'#4CAF50','H·ªçc sinh b·∫•t th∆∞·ªùng':'#FF5252'},
                      labels={'value':'S·ªë h·ªçc sinh','Lop':'L·ªõp'}, title="T·ªïng h·ªçc sinh & H·ªçc sinh b·∫•t th∆∞·ªùng theo l·ªõp")
    st.plotly_chart(fig_col, use_container_width=True)

    # ==========================
    # Scatter & Histogram t·ª´ng m√¥n
    # ==========================
    st.subheader("üìà Scatter & Histogram theo m√¥n")
    for subj in subjects:
        st.markdown(f"### {subj}")

        # Scatter
        fig_scat = px.scatter(df_filtered, x='MaHS', y=subj, color=f'Z_{subj}',
                              color_continuous_scale='RdYlGn_r', 
                              size=df_filtered[f'Z_{subj}'].abs(),
                              size_max=20,
                              hover_data={'MaHS':True, subj:True, f'Z_{subj}':True})
        st.plotly_chart(fig_scat, use_container_width=True)

        # Histogram
        fig_hist = px.histogram(df_filtered, x=subj, nbins=20, color=f'Highlight_{subj}',
                                 color_discrete_map={True:'#FF0000', False:'#4CAF50'},
                                 labels={'count':'S·ªë h·ªçc sinh'})
        st.plotly_chart(fig_hist, use_container_width=True)

# ==========================
# Footer
# ==========================
st.markdown("""
<div class="footer">
    <p><b>Nh√≥m Th·ª±c Hi·ªán:</b> L·∫°i Nguy·ªÖn Minh Tr√≠ v√† nh·ªØng ng∆∞·ªùi b·∫°n</p>
    <p>üìû Li√™n h·ªá: 0908-083566 | üìß Email: laingminhtri@gmail.com</p>
    <p>¬© 2025 Tr∆∞·ªùng THPT Marie Curie - D·ª± √°n Ph√¢n T√≠ch ƒêi·ªÉm B·∫•t Th∆∞·ªùng</p>
</div>
""", unsafe_allow_html=True)
